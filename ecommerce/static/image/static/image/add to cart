
def add_item_wishlist(request, id):
	pid = request.GET.get('product')
	product = Product.objects.get(id = id)
	data={'pid':pid}
	checkw = Wishlist.objects.filter(product = product,user = request.user).count()
	if checkw > 0:
		data = { 
			'bool':False
		}
	else:
		wishlist = Wishlist.objects.create(
			product = product,
			user = request.user
		)
		data = {
			'bool':True
		}
	return JsonResponse(data)


def my_wishlist(request):
	wlist = Wishlist.objects.filter(user = request.user).order_by('-id')
	return render(request, 'wishlist.html',{'wlist':wlist})

def add_wishlist(request, id):

   products = Product.objects.get(id = id)
   created,wishlist = Wishlist.objects.get_or_create(user = request.user) 
   wishlists = Wishlist.objects.get(user = request.user) 
   wishlists.product.add(products) 
   messages.success(request, products.title)
   return redirect('store') 

def cart_contents(request):
    """
    Ensures that the cart contents are available when rendering
    every page
    """
    cart = request.session.get('cart', {})
    cart_items = []
    total = 0
    destination_count = 0
    for id, quantity in cart.items():
        destination = get_object_or_404(Destinations, pk=id)
        #remove = request.session.pop('cart', {id}) <<<<<<
        price = destination.price
        total += quantity * destination.price
        destination_count += quantity
        cart_items.append({'id': id, 'quantity': quantity, 'destination': destination, 'price':price, 'remove':remove})
    #cart_item will loop into the cart.
    return {'cart_items': cart_items, 'total': total, 'destination_count': destination_count}


@login_required
def add_order(request):
    user = request.user
    taxs = 22
    total_price = Cart.objects.filter(Q(user=request.user) & Q(is_active=True)).aggregate(
        total=Sum(F('price')*F('quantity')))['total']
    if total_price is not None:
        order_add = Order.objects.create(
            user=request.user, tax=taxs, total_cost=total_price,)
        orders.items.add(
            *Cart.objects.filter(Q(user=request.user) & Q(is_active=True)))
        inactive = Cart.objects.filter(user=request.user)
        inactive.update(is_active=False)
        order_add.save()
    return (request, 'order.html')


class Orderproducts(ListView):
    model = Order
    template_name = "order.html"

    def get_queryset(self):
        obj = Order.objects.filter(user=self.request.user)
        return obj

    def get_context_data(self, *args, **kwargs):
        context = super().get_context_data(*args, **kwargs)
        context['total'] = Order.objects.filter(user=self.request.user).aggregate(
            Sum('total_cost'))['total_sum']
        context['tax'] = Order.objects.filter(user=self.request.user).aggregate(
            total=Sum(F('total_product_cost') * 18/100))['total']
        if context['sub_total'] is not None:
            context['total_price'] = context['sub_total'] + context['tax']
        return context
        